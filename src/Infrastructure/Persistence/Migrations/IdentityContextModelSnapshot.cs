// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechOnIt.Infrastructure.Persistence.Context;

#nullable disable

namespace TechOnIt.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechOnIt.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsHigh")
                        .HasColumnType("bit");

                    b.Property<decimal>("Pin")
                        .HasMaxLength(4)
                        .HasColumnType("numeric");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserAggregate.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ConfirmedEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmedPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockOutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaxFailCount")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.LogRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullMessage")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(15)");

                    b.Property<byte>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)20);

                    b.Property<byte>("PresentationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShortMessage");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.SensorAggregate.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.SensorAggregate.SensorReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorReports");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Structure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Device", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.StructureAggregate.Place", "Place")
                        .WithMany("Devices")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserAggregate.LoginHistory", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.Identity.UserAggregate.User", "User")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TechOnIt.Domain.ValueObjects.IPv4", "Ip", b1 =>
                        {
                            b1.Property<Guid>("LoginHistoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Ip");

                            b1.HasKey("LoginHistoryId");

                            b1.ToTable("LoginHistories");

                            b1.WithOwner()
                                .HasForeignKey("LoginHistoryId");
                        });

                    b.Navigation("Ip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserAggregate.User", b =>
                {
                    b.OwnsOne("TechOnIt.Domain.ValueObjects.PasswordHash", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Password");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("TechOnIt.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Surname");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FullName");

                    b.Navigation("Password");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechOnIt.Domain.Entities.Identity.UserAggregate.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.LogRecord", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.Identity.UserAggregate.User", "User")
                        .WithMany("LogHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.SensorAggregate.Sensor", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.StructureAggregate.Place", "Place")
                        .WithMany("Sensors")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.SensorAggregate.SensorReport", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.SensorAggregate.Sensor", "Sensor")
                        .WithMany("Reports")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Place", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.StructureAggregate.Structure", "Structure")
                        .WithMany("Places")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Structure", b =>
                {
                    b.HasOne("TechOnIt.Domain.Entities.Identity.UserAggregate.User", "User")
                        .WithMany("Structures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TechOnIt.Domain.ValueObjects.PasswordHash", "Password", b1 =>
                        {
                            b1.Property<Guid>("StructureId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Password");

                            b1.HasKey("StructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("StructureId");
                        });

                    b.OwnsOne("TechOnIt.Domain.ValueObjects.Concurrency", "ApiKey", b1 =>
                        {
                            b1.Property<Guid>("StructureId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ApiKey");

                            b1.HasKey("StructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("StructureId");
                        });

                    b.Navigation("ApiKey")
                        .IsRequired();

                    b.Navigation("Password");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.Identity.UserAggregate.User", b =>
                {
                    b.Navigation("LogHistories");

                    b.Navigation("LoginHistories");

                    b.Navigation("Structures");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.SensorAggregate.Sensor", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Place", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("TechOnIt.Domain.Entities.StructureAggregate.Structure", b =>
                {
                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
